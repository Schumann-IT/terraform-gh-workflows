name: Update Output

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment'
        required: true
        type: string
      provider:
        description: 'The terraform provider'
        required: false
        type: string
        default: 'aws'
      role:
        description: 'Role name'
        required: false
        type: string
      tf-init-args:
        description: 'Terraform init arguments'
        required: false
        type: string
        default: ''
      report:
        description: 'Weather to report plan result to slack'
        required: false
        type: string
        default: 'no'
      load-apply-artifact:
        description: 'Weather to load the apply artifact'
        required: false
        type: string
        default: 'no'
      ssh-private-key:
        description: 'SSH private key'
        required: false
        type: string
        default: ''

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  create:
    name: Create output ${{ inputs.environment }}
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    continue-on-error: true
    outputs:
      plaintext: ${{ steps.pr.outputs.stdout }}
      artifact-id: ${{ steps.upload.outputs.artifact-id }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        if: ${{ inputs.load-apply-artifact == 'yes' }}
        with:
          name: ${{ inputs.environment }}-apply
      - if: ${{ inputs.provider == 'aws' && inputs.role }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.role }}
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ vars.TF_VERSION && vars.TF_VERSION || 'latest' }}
      - if: ${{ inputs.ssh-private-key != '' }}
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ inputs.ssh-private-key }}

      - name: Init
        run: |
          terraform init ${{ inputs.tf-init-args }}
          terraform workspace select ${{ inputs.environment }} || terraform workspace new ${{ inputs.environment }}

      - name: Plaintext
        continue-on-error: true
        id: plaintext
        run: |
          terraform output > ${{ inputs.environment }}-output.txt
          
          SIZE=$(ls -la ${{ inputs.environment }}-output.txt | awk '{print $5}')
          echo INFO: Plaintext output size is ${SIZE}
          echo "size=${SIZE}" >> "$GITHUB_OUTPUT"

      - name: Json
        continue-on-error: true
        id: json
        run: |
          terraform output -json > ${{ inputs.environment }}-output.json

          SIZE=$(ls -la ${{ inputs.environment }}-output.json | awk '{print $5}')
          echo INFO: Json output size is ${SIZE}
          echo "size=${SIZE}" >> "$GITHUB_OUTPUT"

      - uses: actions/upload-artifact@v4
        continue-on-error: true
        id: upload
        with:
          name: ${{ inputs.environment }}-output
          path: ${{ inputs.environment }}-output*.*
          if-no-files-found: 'ignore'

      - name: PR
        continue-on-error: true
        id: pr
        run: |
          if [[ ${{ steps.plaintext.outputs.size }} -gt 1000000 ]]; then
            echo "WARN: cannot display: output size exceeds max 1MB"
            exit 0
          fi

          terraform output

  # show the output as a comment on the pull request
  pr:
    name: Show output PR ${{ inputs.environment }}
    if: ${{ always() && needs.create.result == 'success' && github.event_name == 'pull_request' }}
    needs:
      - create
    continue-on-error: true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        if: ${{ inputs.load-apply-artifact == 'yes' }}
        with:
          name: ${{ inputs.environment }}-apply

      - name: Upsert comment
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('### ${{ inputs.environment }} output')
            })

            const output = `### ${{ inputs.environment }} output
            *Run:* ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            *Run ID: \`${{ github.run_id }}\`*
            *Commit: \`${{ github.sha }}\`*
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*
            *Artifacts:* ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${{ needs.create.outputs.artifact-id }}
            
            <details><summary>Show Output</summary>
            
            \`\`\`\n
            ${{ needs.create.outputs.plaintext == '' && 'Output too large to display.' || needs.create.outputs.plaintext }}
            \`\`\`
            
            </details>`;
            
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

  # report output to slack
  report:
    name: Report output ${{ inputs.environment }}
    needs:
      - create
    if: ${{ always() && needs.create.result == 'success' && inputs.report == 'yes' }}
    continue-on-error: true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.environment }}-output

      - name: Slack notify
        uses: slackapi/slack-github-action@v1.27.0
        with:
          payload-file-path: ${{ inputs.environment }}-output.json
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK